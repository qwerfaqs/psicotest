<?php


/**
 * Skeleton subclass for performing query and update operations on the 'resultados' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 09/28/11 17:10:10
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class ResultadosPeer extends BaseResultadosPeer 
{
 public static function getResultados($prueba)
  {
    $criteria = new Criteria();    

    $criteria->add(ResultadosPeer::PRUEBAS_ID,$prueba,Criteria::EQUAL);     
    return (self::doSelectJoinAll($criteria));
  }
  
  
  
  public static function getResultado($prueba,$aspirante)
  {
    $criteria = new Criteria();    

    $criteria->add(ResultadosPeer::PRUEBAS_ID,$prueba,Criteria::EQUAL);     
    $criteria->add(ResultadosPeer::ASPIRANTES_ID,$aspirante,Criteria::EQUAL); 
    return (self::doSelectOne($criteria));
  }
  
  
  
  public static function getCantAprobados()
  {
     $sql ="SELECT tests.titulo, COUNT( * ) as cantidad
            FROM resultados
            INNER JOIN pruebas ON resultados.pruebas_id = pruebas.id
            INNER JOIN tests ON pruebas.tests_id = tests.id
            WHERE estadosresultados_id =1
            GROUP BY tests.id";
      
   /* $criteria = new Criteria();    
    $criteria->addJoin(self::PRUEBAS_ID,PruebasPeer::ID, Criteria::INNER_JOIN);
    $criteria->addJoin(PruebasPeer::TESTS_ID,TestsPeer::ID, Criteria::INNER_JOIN);    
    $estado = sfConfig::get('app_activo');
    $criteria->add(ResultadosPeer::ESTADOSRESULTADOS_ID,$estado,Criteria::EQUAL);     
    $criteria->addGroupByColumn(TestsPeer::ID); 
    echo $criteria->toString();
    return (self::doSelect($criteria));*/
      
       $connection = Propel::getConnection();
       $statement = $connection->prepare($sql);
        $statement->execute();
        $datos = array();
        while ($result = $statement->fetch(PDO::FETCH_ASSOC)) {
            $datos[] = $result;
        }
        return($datos);
  }
  
   public static function getCantDesaprobados()
  {
     $sql ="SELECT tests.titulo, COUNT( * ) as cantidad
            FROM resultados
            INNER JOIN pruebas ON resultados.pruebas_id = pruebas.id
            INNER JOIN tests ON pruebas.tests_id = tests.id
            WHERE estadosresultados_id =2
            GROUP BY tests.id";
      
   /* $criteria = new Criteria();    
    $criteria->addJoin(self::PRUEBAS_ID,PruebasPeer::ID, Criteria::INNER_JOIN);
    $criteria->addJoin(PruebasPeer::TESTS_ID,TestsPeer::ID, Criteria::INNER_JOIN);    
    $estado = sfConfig::get('app_activo');
    $criteria->add(ResultadosPeer::ESTADOSRESULTADOS_ID,$estado,Criteria::EQUAL);     
    $criteria->addGroupByColumn(TestsPeer::ID); 
    echo $criteria->toString();
    return (self::doSelect($criteria));*/
      
       $connection = Propel::getConnection();
       $statement = $connection->prepare($sql);
        $statement->execute();
        $datos = array();
        while ($result = $statement->fetch(PDO::FETCH_ASSOC)) {
            $datos[] = $result;
        }
        return($datos);
  }
  
  public static function getCantAspirantes()
  {
       $criteria = new Criteria();
       $sql = "SELECT sexo,count(*) as cantidad FROM `aspirantes`
        group by sexo WITH ROLLUP";
        $connection = Propel::getConnection();
       $statement = $connection->prepare($sql);
        $statement->execute();
        $datos = array();
        while ($result = $statement->fetch(PDO::FETCH_ASSOC)) {
            $datos[] = $result;
        }
        return($datos);
  }
  
  public static function getPodio()
  {
    $criteria = new Criteria();    
    $criteria->addJoin(self::PRUEBAS_ID,PruebasPeer::ID, Criteria::INNER_JOIN);
    $criteria->addJoin(PruebasPeer::TESTS_ID,TestsPeer::ID, Criteria::INNER_JOIN);       
    $criteria->addJoin(self::ASPIRANTES_ID,AspirantesPeer::ID, Criteria::INNER_JOIN); 
    $criteria->addDescendingOrderByColumn(self::PUNTAJE);    
    $criteria->setLimit(20);
    return (self::doSelect($criteria));   
  }
  
} // ResultadosPeer
