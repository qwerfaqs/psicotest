<?php
/**
 * Skeleton subclass for performing query and update operations on the 'percentiles' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 10/11/11 16:15:20
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class PercentilesPeer extends BasePercentilesPeer {
    public static function getPercentil($test,$puntaje) {
  /*  $criteria = new Criteria();    
    $criteria->addJoin(PercentilesPeer::ESCALAS_ID,  EscalasPeer::ID,  Criteria::INNER_JOIN);
    $criteria->add(EscalasPeer::TESTS_ID,$test,Criteria::EQUAL);
    $criteria->add('percentiles.hasta',$puntaje,Criteria::GREATER_EQUAL);
    $criteria->addAnd('percentiles.desde',$puntaje,Criteria::LESS_EQUAL);    */   
   
    /*SELECT * FROM `percentiles` WHERE 46 between desde and 
IFNULL(hasta,desde)*/
        $query = "SELECT * FROM percentiles 
                  INNER JOIN escalas ON percentiles.escalas_id = escalas.id  
                  WHERE escalas.tests_id=$test AND $puntaje between percentiles.desde and 
                  IFNULL(percentiles.hasta,percentiles.desde)";
        $connection = Propel::getConnection(self::DATABASE_NAME);
        $statement = $connection->prepare($query);
        $statement->execute();
        return self::populateObjects($statement, $connection);
    }
    public static function getPercentilPorEscala($escala, $puntaje) {
        
        $query = "SELECT * FROM percentiles 
                  WHERE escalas_id=$escala AND $puntaje between percentiles.desde and 
                  IFNULL(percentiles.hasta,percentiles.desde)";
        $connection = Propel::getConnection(self::DATABASE_NAME);
        $statement = $connection->prepare($query);
        $statement->execute();
        $r = self::populateObjects($statement, $connection);
        return $r[0];
    }
    public static function evaluarValorEsperado(Perfil $perfil, Percentiles $percentil) {
        $criteria = new Criteria();
        $criteria->add(ValoresperadoPeer::ESCALAS_ID, $percentil->getEscalasId());
        $valorEsperados = $perfil->getValoresperados($criteria);
//        var_dump($perfil);
//        var_dump($percentil);   
        $valorEsperado = $valorEsperados[0];
//        $valorEsperado = new Valoresperado();
        return  (   $valorEsperado->getMayorque() <= $percentil->getPercentil() 
                    and $valorEsperado->getMenorque() >= $percentil->getPercentil() ) ? true : false;
        
    }
} // PercentilesPeer
?>